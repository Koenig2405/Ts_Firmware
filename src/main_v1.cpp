#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Encoder.h>

#define SCREEN_WIDTH 128 /*128 width of OLED in pixels*/
#define SCREEN_HEIGHT 64 /*64 height of OLED in pixels*/

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); /*OLED display connected at I2C pins (SDA, SCL)*/

Encoder myEnc(2, 6);
const int EncSW = 3;

void enterInterrupt();    //interrupt for the Encoder Button
bool enterState = false;  //
long oldPosition = -999;

const int buzzer = 8;

int prg_cnt = 0;

enum FANSPEED
{
    low,
    mid,
    high
};

void showBoot(); 
// 'BootScreen', 128x64px
const unsigned char bootScreen [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xf8, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0xc6, 0x0f, 0x0d, 0xe0, 0x78, 0x3c, 0x37, 0x03, 0x03, 0x37, 0x61, 0x87, 0x86, 0xe0, 
	0x07, 0xc0, 0xc6, 0x19, 0x8e, 0x30, 0xcc, 0x66, 0x3f, 0x03, 0x03, 0x3f, 0x61, 0x8c, 0xc7, 0xe0, 
	0x03, 0xf8, 0xc6, 0x30, 0xcc, 0x31, 0x80, 0xc3, 0x30, 0x03, 0x03, 0x30, 0x33, 0x18, 0x66, 0x00, 
	0x00, 0x3c, 0xc6, 0x3f, 0xcc, 0x31, 0x80, 0xff, 0x30, 0x03, 0x03, 0x30, 0x33, 0x1f, 0xe6, 0x00, 
	0x00, 0x0c, 0xc6, 0x30, 0x0c, 0x31, 0x80, 0xc0, 0x30, 0x03, 0x03, 0x30, 0x33, 0x18, 0x06, 0x00, 
	0x06, 0x0c, 0xc6, 0x30, 0x0c, 0x31, 0x80, 0xc0, 0x30, 0x03, 0x06, 0x30, 0x1e, 0x18, 0x06, 0x00, 
	0x06, 0x18, 0xc6, 0x18, 0xcc, 0x30, 0xcc, 0x63, 0x30, 0x03, 0x0e, 0x30, 0x1e, 0x0c, 0x66, 0x00, 
	0x03, 0xf0, 0xc6, 0x0f, 0x8c, 0x30, 0x78, 0x3e, 0x30, 0x03, 0xf8, 0x30, 0x0c, 0x07, 0xc6, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x07, 0x8f, 0x9e, 0x05, 0xc8, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x80, 0x50, 0xa1, 0x06, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x80, 0x50, 0xa1, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x87, 0xd0, 0xbf, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88, 0x50, 0xa0, 0x04, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x88, 0x51, 0xa1, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x87, 0xce, 0x9e, 0x07, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x04, 0x21, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xa2, 0x8f, 0x11, 0x11, 0x66, 0x08, 0x88, 0x78, 0xb8, 0x04, 0x81, 0xe2, 0xe2, 0x1f, 0x00, 
	0x00, 0xa2, 0x80, 0x91, 0x11, 0x99, 0x08, 0x88, 0x04, 0xc4, 0x05, 0x02, 0x13, 0x12, 0x21, 0x00, 
	0x00, 0x94, 0x80, 0x8a, 0x11, 0x11, 0x08, 0x88, 0x04, 0x84, 0x06, 0x02, 0x12, 0x12, 0x21, 0x00, 
	0x00, 0x94, 0x8f, 0x84, 0x11, 0x11, 0x08, 0x88, 0x7c, 0x84, 0x05, 0x02, 0x12, 0x12, 0x21, 0x00, 
	0x00, 0x88, 0x90, 0x8a, 0x11, 0x11, 0x08, 0x88, 0x84, 0x84, 0x04, 0x82, 0x12, 0x12, 0x21, 0x00, 
	0x00, 0x88, 0x90, 0x91, 0x11, 0x11, 0x08, 0x88, 0x84, 0x84, 0x04, 0x42, 0x12, 0x12, 0x23, 0x00, 
	0x00, 0x80, 0x8f, 0x91, 0x11, 0x11, 0x08, 0x88, 0x7c, 0x84, 0x04, 0x21, 0xe2, 0x12, 0x1d, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

FANSPEED selectFanSpeed();
FANSPEED globalFanspeed = low;

int selectDuration();
int globalDuration = 30;

bool setAlarm();
bool globalAlarm = false;

void displaySetup()
{
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
    { /*I2C Address at which OLED will communicate*/
        Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ;
    }

    display.clearDisplay();                 /*Clear display*/
    display.setTextSize(2);                 /*OLED screen text size defined*/
    display.setTextColor(WHITE);            /*OLED screen text color*/
}

void setup() 
{
    Serial.begin(9600);
    displaySetup();

    pinMode(EncSW, INPUT);
    attachInterrupt(digitalPinToInterrupt(EncSW), enterInterrupt, FALLING);

    pinMode(buzzer, OUTPUT);
    digitalWrite(buzzer, true);

}

void loop() 
{
    switch (prg_cnt)
    {
    case 0:
        showBoot();
        prg_cnt = 1;
        break;

    case 1:
        globalFanspeed = selectFanSpeed();
        enterState = false;
        prg_cnt = 2;

    case 2:
        globalDuration = selectDuration();
        enterState = false;
        prg_cnt = 3;

    case 3:
        globalAlarm = setAlarm();
        enterState = false;
        prg_cnt = 1;
    
    default:
        break;
    }
}

void enterInterrupt()
{
    enterState = true;
    digitalWrite(buzzer, false);
    Serial.println("Interrupt:: Button pressed!");
    
    delay(1000);
    EIFR = (0b11 << INTF0);
    digitalWrite(buzzer, true);
    delay(2000);
}

void showBoot()
{
    display.drawBitmap(0, 0, bootScreen, 128, 64, WHITE);
    display.display();
    Serial.println("BootScreen:: BootScreen");
    delay(5000);

    /*digitalWrite(buzzer, false);  //Bootup Sound
    delay(200);
    digitalWrite(buzzer, true);
    delay(200);
    digitalWrite(buzzer, false);
    delay(200);
    digitalWrite(buzzer, true);
    delay(200);
    digitalWrite(buzzer, false);
    delay(700);
    digitalWrite(buzzer, true);*/
}

FANSPEED selectFanSpeed()
{
    FANSPEED fanSpeed = low;
    myEnc.write(0);
    oldPosition = -999;

    while(true)
    {
        long newPosition = (-myEnc.read()/4) % 3 + 1;
        
        if (newPosition != oldPosition)
        {
            //Serial.println(newPosition);
            oldPosition = newPosition;
            switch (newPosition)
            {
            case 1:
                Serial.println("FanSpeed:: Niedrig");

                display.clearDisplay(); 
                display.setCursor(25, 24);
                display.println("Niedrig");
                display.display();
                fanSpeed = low;
                break;

            case 2:
            case -1:    //because of negative Values
                Serial.println("FanSpeed:: Mittel");

                display.clearDisplay(); 
                display.setCursor(32, 24);
                display.println("Mittel");
                display.display();
                fanSpeed = mid;
                break;
            
            case 3:
            case 0: //because of negative Values
                Serial.println("FanSpeed:: Hoch");

                display.clearDisplay(); 
                display.setCursor(42, 24);
                display.println("Hoch");
                display.display();
                fanSpeed = high;
                break;
            
            default:
                Serial.println("FanSpeed:: ERROR!");
                break;
            }
        }
        if (enterState == true)
        {
            oldPosition = -999;
            return fanSpeed;
        }
    }
}

int selectDuration()
{
    myEnc.write(-4);
    long newPosition;

    while (true)
    {    
        newPosition = (-myEnc.read()/4) * 10;

        if (newPosition != oldPosition)
        {
            if(newPosition < 10)
            {
                newPosition = 10;
                myEnc.write(-4);
            }
            if(newPosition > 240)
            {
                newPosition = 240;
                myEnc.write(-96);   //-94 da 1 klick 4 Werte sind
            }
            oldPosition = newPosition;

            Serial.print("Duration:: ");
            Serial.println(newPosition);
            display.clearDisplay();   
            if(newPosition < 100)
            {
                display.setCursor(53, 24);
            }
            else
            {
                display.setCursor(47, 24);
            }

            display.println(newPosition);
            display.display();
        }
        
        if (enterState == true)
        {
            oldPosition = -999;
            return newPosition;
        }
    }
}

bool setAlarm()
{
    myEnc.write(0);
    long newPosition;
    bool alarm = false;

    while(true)
    {
        newPosition = (-myEnc.read()/4) % 2 + 1;

         if (newPosition != oldPosition)
        {
            Serial.println(newPosition);
            oldPosition = newPosition;
            switch (newPosition)
            {
            case 1:
                Serial.println("ALARM:: OFF");

                display.clearDisplay();
                display.setCursor(50, 24);
                display.println("OFF");
                display.display();
                alarm = false;
                break;

            case 2:
            case 0: //because of negative Values
                Serial.println("Alarm:: ON");
                display.clearDisplay(); 
                display.setCursor(55, 24);
                display.println("ON");
                display.display();
                alarm = true;
                break;
            
            default:
                break;
            }
        }
        if (enterState == true)
        {
            oldPosition = -999;
            return alarm;
        }
    }
}